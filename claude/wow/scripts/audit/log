#!/usr/bin/env node

/**
 * Audit Log Script - Centralized audit logging
 * 
 * Handles all audit logging with proper formatting and error handling
 * Usage: audit-log <workflow> <action> <step> <details> <description>
 */

import { promises as fs, existsSync } from 'fs';
import { createRepoConfig } from './lib/repo-config.js';
import path from 'path';

/**
 * Main function
 */
async function main() {
    try {
        const args = process.argv.slice(2);
        const workflow = args[0];
        const action = args[1] || 'step';
        const step = args[2] || '';
        const details = args[3] || '';
        const description = args[4] || '';
        
        if (!workflow) {
            console.error('Usage: audit-log <workflow> <action> <step> <details> <description>');
            process.exit(1);
        }
        
        // Generate audit entry
        const timestamp = new Date().toISOString().replace('T', ' ').substring(0, 19);
        const entry = `${timestamp}|${workflow}|${action}|${step}|${details}|${description}`;
        
        try {
            // Get audit path from repo config
            const repoConfig = createRepoConfig();
            const config = repoConfig.getRepositoryInfo();
            const auditPath = path.join(config.projectRoot, 'claude/project/audit/current/current.log');
            
            // Ensure audit directory exists
            const auditDir = path.dirname(auditPath);
            if (!existsSync(auditDir)) {
                await fs.mkdir(auditDir, { recursive: true });
            }
            
            // Append audit entry
            await fs.appendFile(auditPath, entry + '\n');
            
        } catch (error) {
            // Fallback to console if audit file operation fails
            console.log(`[AUDIT] ${entry}`);
        }
        
    } catch (error) {
        console.error(`‚ùå Audit logging failed: ${error.message}`);
        process.exit(1);
    }
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
    main();
}