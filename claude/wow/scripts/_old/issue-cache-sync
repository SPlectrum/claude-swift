#!/usr/bin/env node

const fs = require('fs');
const { execSync } = require('child_process');

// Ensure cache directory exists
function ensureCacheDirectory() {
    if (!fs.existsSync('claude/cache')) {
        fs.mkdirSync('claude/cache', { recursive: true });
        console.log('üìÅ Created cache directory');
    }
}

// Fetch issues from GitHub
function fetchIssuesFromGitHub() {
    try {
        console.log('üîÑ Fetching issues from GitHub...');
        
        // Get all open issues with full metadata
        const result = execSync('claude/wow/scripts/gh-issue list --state open --limit 100 --json number,title,labels,state,milestone,createdAt,updatedAt', { 
            encoding: 'utf8' 
        });
        
        const issues = JSON.parse(result);
        console.log(`üìä Fetched ${issues.length} open issues from GitHub`);
        
        return issues;
    } catch (error) {
        console.error(`‚ùå Failed to fetch issues from GitHub: ${error.message}`);
        return [];
    }
}

// Fetch milestones from GitHub  
function fetchMilestonesFromGitHub() {
    try {
        console.log('üéØ Fetching milestones from GitHub...');
        
        // Get milestones using gh API (since gh-issue doesn't support milestones list)
        const result = execSync('claude/wow/scripts/gh-api repos/:owner/:repo/milestones --json number,title,state,description,created_at', { 
            encoding: 'utf8' 
        });
        
        const milestones = JSON.parse(result);
        console.log(`üéØ Fetched ${milestones.length} milestones from GitHub`);
        
        return milestones;
    } catch (error) {
        console.error(`‚ö† Failed to fetch milestones from GitHub: ${error.message}`);
        return [];
    }
}

// Save data to cache
function saveToCache(issues, milestones) {
    const timestamp = new Date().toISOString();
    
    try {
        // Convert issues array to keyed object
        const issueCache = {};
        issues.forEach(issue => {
            issueCache[issue.number.toString()] = {
                ...issue,
                cached_at: timestamp
            };
        });
        
        // Convert milestones array to keyed object
        const milestoneCache = {};
        milestones.forEach(milestone => {
            milestoneCache[milestone.number.toString()] = {
                ...milestone,
                cached_at: timestamp
            };
        });
        
        // Create metadata
        const metadata = {
            last_sync: timestamp,
            cache_version: '1.0.0',
            last_issue_number: issues.length > 0 ? Math.max(...issues.map(i => i.number)) : 0,
            last_milestone_number: milestones.length > 0 ? Math.max(...milestones.map(m => m.number)) : 0
        };
        
        // Write cache files
        fs.writeFileSync('claude/cache/issues.json', JSON.stringify(issueCache, null, 2));
        fs.writeFileSync('claude/cache/milestones.json', JSON.stringify(milestoneCache, null, 2));
        fs.writeFileSync('claude/cache/metadata.json', JSON.stringify(metadata, null, 2));
        
        console.log('üíæ Cache files updated:');
        console.log(`  üìù ${Object.keys(issueCache).length} issues in claude/cache/issues.json`);
        console.log(`  üéØ ${Object.keys(milestoneCache).length} milestones in claude/cache/milestones.json`);
        console.log(`  üìä Metadata in claude/cache/metadata.json`);
        
        return true;
    } catch (error) {
        console.error(`‚ùå Failed to save cache: ${error.message}`);
        return false;
    }
}

// Check cache status
function checkCacheStatus() {
    const files = ['claude/cache/issues.json', 'claude/cache/milestones.json', 'claude/cache/metadata.json'];
    const status = {};
    
    files.forEach(file => {
        if (fs.existsSync(file)) {
            const stats = fs.statSync(file);
            status[file] = {
                exists: true,
                size: stats.size,
                modified: stats.mtime.toISOString()
            };
        } else {
            status[file] = { exists: false };
        }
    });
    
    return status;
}

// Main function
function main() {
    console.log('üîÑ ISSUE CACHE SYNC: Starting GitHub-only cache synchronization');
    console.log('');
    
    // Log workflow start
    execSync('claude/wow/scripts/audit-log "ISSUE_CACHE" "workflow_start" "cache_sync" "" "Starting issue cache synchronization with GitHub"', { stdio: 'inherit' });
    
    try {
        // Ensure cache directory exists
        ensureCacheDirectory();
        
        // Show current cache status
        console.log('üìä Current cache status:');
        const cacheStatus = checkCacheStatus();
        Object.entries(cacheStatus).forEach(([file, status]) => {
            if (status.exists) {
                console.log(`  ‚úì ${file} (${status.size} bytes, modified: ${status.modified})`);
            } else {
                console.log(`  ‚ùå ${file} (missing)`);
            }
        });
        console.log('');
        
        // Fetch data from GitHub
        const issues = fetchIssuesFromGitHub();
        const milestones = fetchMilestonesFromGitHub();
        
        // Save to cache
        if (saveToCache(issues, milestones)) {
            console.log('');
            console.log('‚úì Cache synchronization completed successfully');
            console.log(`üìä Total cached: ${issues.length} issues, ${milestones.length} milestones`);
            
            // Log successful completion
            execSync(`claude/wow/scripts/audit-log "ISSUE_CACHE" "workflow_complete" "cache_sync" "" "Cache sync completed: ${issues.length} issues, ${milestones.length} milestones"`, { stdio: 'inherit' });
            
            process.exit(0);
        } else {
            console.error('‚ùå Cache synchronization failed');
            process.exit(1);
        }
        
    } catch (error) {
        console.error(`‚ùå Cache synchronization error: ${error.message}`);
        process.exit(1);
    }
}

// Run the script
if (require.main === module) {
    main();
}