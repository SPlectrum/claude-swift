#!/usr/bin/env node

/**
 * Move File Script - Automated file movement
 * 
 * Moves files with proper error handling and audit logging
 * Usage: move-file <source_path> <destination_path>
 */

import { promises as fs, existsSync } from 'fs';
import { createRepoConfig } from './lib/repo-config.js';
import path from 'path';

/**
 * Audit logging helper
 */
function auditLog(workflow, step, details = '', action = 'step', description = '') {
    const timestamp = new Date().toISOString().replace('T', ' ').substring(0, 19);
    const entry = `${timestamp}|${workflow}|${action}|${step}|${details}|${description}`;
    
    try {
        const auditPath = 'claude/project/audit/current/current.log';
        const logCmd = `echo "${entry}" >> "${auditPath}"`;
        require('child_process').execSync(logCmd, { stdio: 'ignore' });
    } catch (error) {
        console.log(`[AUDIT] ${entry}`);
    }
}

/**
 * Main function
 */
async function main() {
    try {
        const args = process.argv.slice(2);
        const sourcePath = args[0];
        const destPath = args[1];
        
        if (!sourcePath || !destPath) {
            console.error('Usage: move-file <source_path> <destination_path>');
            process.exit(1);
        }
        
        if (!existsSync(sourcePath)) {
            throw new Error(`Source file does not exist: ${sourcePath}`);
        }
        
        // Ensure destination directory exists
        const destDir = path.dirname(destPath);
        if (!existsSync(destDir)) {
            await fs.mkdir(destDir, { recursive: true });
            auditLog('MANUAL', 'move_file', destDir, 'step', `Created destination directory: ${destDir}`);
        }
        
        // Move the file
        await fs.rename(sourcePath, destPath);
        auditLog('MANUAL', 'move_file', `${sourcePath} -> ${destPath}`, 'step', `Moved file successfully`);
        console.log(`✓ Moved: ${sourcePath} -> ${destPath}`);
        
    } catch (error) {
        console.error(`❌ File move failed: ${error.message}`);
        auditLog('MANUAL', 'move_file', '', 'workflow_error', `File move failed: ${error.message}`);
        process.exit(1);
    }
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
    main();
}