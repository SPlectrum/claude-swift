#!/usr/bin/env node

/**
 * Registration Management Script - Unified project registration system
 * 
 * Dispatches to registration subcommands:
 * - init: Initialize workspace (INITIALISE workflow)
 * - add [org/repo]: Register specific project
 * - remove [org/repo]: Unregister and clean up project
 * - list: Show all registered projects
 * - status: Show workspace and registration status
 * 
 * Usage:
 *   register-manage init
 *   register-manage add org/repo
 *   register-manage remove org/repo
 *   register-manage list
 *   register-manage status
 */

import { promises as fs, existsSync } from 'fs';
import { execSync } from 'child_process';
import path from 'path';

/**
 * Load registered projects from registry
 */
async function loadRegistry() {
    const registryPath = 'claude/project/registered-projects.json';
    
    if (!existsSync(registryPath)) {
        return { registered_projects: [] };
    }
    
    try {
        const content = await fs.readFile(registryPath, 'utf8');
        return JSON.parse(content);
    } catch (error) {
        console.error(`Failed to load registry: ${error.message}`);
        return { registered_projects: [] };
    }
}

/**
 * Save registered projects to registry
 */
async function saveRegistry(registry) {
    const registryPath = 'claude/project/registered-projects.json';
    const registryDir = path.dirname(registryPath);
    
    if (!existsSync(registryDir)) {
        await fs.mkdir(registryDir, { recursive: true });
    }
    
    await fs.writeFile(registryPath, JSON.stringify(registry, null, 2));
}

/**
 * Initialize workspace (INITIALISE workflow)
 */
async function initializeWorkspace() {
    console.log('üöÄ Initializing claude-swift workspace...');
    console.log('‚ïê'.repeat(50));
    
    try {
        // Detect workspace root as ../.. from current repository
        const workspacePath = path.resolve('../..');
        console.log(`Detected workspace root: ${workspacePath}`);
        
        // Validate workspace structure
        if (!existsSync(workspacePath)) {
            throw new Error('Workspace root not accessible. Ensure claude-swift repository is positioned correctly.');
        }
        
        // Check for existing projects/ directory or symlink
        if (existsSync('projects')) {
            console.log('Existing projects/ found - removing to create fresh symlink');
            await fs.rm('projects', { recursive: true, force: true });
        }
        
        // Create symlink to workspace root
        await fs.symlink(workspacePath, 'projects');
        console.log(`‚úì Symlink created: projects/ -> ${workspacePath}`);
        
        // Verify symlink works
        if (!existsSync('projects')) {
            throw new Error('Failed to create working symlink');
        }
        
        // Update .gitignore
        let gitignoreContent = '';
        if (existsSync('.gitignore')) {
            gitignoreContent = await fs.readFile('.gitignore', 'utf8');
        }
        
        if (!gitignoreContent.includes('projects/')) {
            gitignoreContent += '\n# Workspace symlink\nprojects/\n';
            await fs.writeFile('.gitignore', gitignoreContent);
            console.log('‚úì Added projects/ to .gitignore');
        } else {
            console.log('‚úì projects/ already in .gitignore');
        }
        
        // Update project-info.md
        const projectInfoPath = 'claude/project/project-info.md';
        let projectInfo = '';
        if (existsSync(projectInfoPath)) {
            projectInfo = await fs.readFile(projectInfoPath, 'utf8');
        }
        
        const workspaceConfig = `
## Workspace Configuration
- **Projects Directory**: Symlinked to ${workspacePath}
- **Workspace Type**: Automatic detection (../..)
- **Initialized**: ${new Date().toISOString().split('T')[0]}
- **Initialization Method**: register-manage init workflow
`;
        
        if (!projectInfo.includes('## Workspace Configuration')) {
            projectInfo += workspaceConfig;
            await fs.writeFile(projectInfoPath, projectInfo);
            console.log('‚úì Updated project-info.md with workspace configuration');
        }
        
        // Show available projects
        try {
            const projects = await fs.readdir('projects');
            console.log('\nüìÅ Available projects in workspace:');
            for (const org of projects) {
                const orgPath = path.join('projects', org);
                if ((await fs.stat(orgPath)).isDirectory()) {
                    const repos = await fs.readdir(orgPath);
                    for (const repo of repos) {
                        const repoPath = path.join(orgPath, repo);
                        if ((await fs.stat(repoPath)).isDirectory()) {
                            console.log(`  ${org}/${repo}`);
                        }
                    }
                }
            }
        } catch (error) {
            console.log('  (workspace empty or not accessible)');
        }
        
        console.log('\n‚úÖ Workspace initialization complete!');
        console.log('\nNext steps:');
        console.log('  - Use "register sesame add [org/repo]" to register projects');
        console.log('  - Use "register sesame list" to see registered projects');
        
    } catch (error) {
        console.error(`‚ùå Workspace initialization failed: ${error.message}`);
        process.exit(1);
    }
}

/**
 * Initialize issues structure for a project
 */
async function initializeIssuesStructure(projectPath) {
    console.log('üîß Initializing issues structure...');
    
    const issuesDir = path.join(projectPath, 'claude/issues');
    
    // Create main directories
    await fs.mkdir(path.join(issuesDir, 'templates'), { recursive: true });
    await fs.mkdir(path.join(issuesDir, 'unassigned'), { recursive: true });
    
    // Create initial sync.json
    const initialSync = {
        last_sync: null,
        last_github_fetch: null,
        total_issues: 0,
        sync_version: "2.0.0",
        bidirectional_sync: true,
        pulled_from_github: 0,
        pushed_to_github: 0,
        conflicts: 0
    };
    
    await fs.writeFile(
        path.join(issuesDir, 'sync.json'),
        JSON.stringify(initialSync, null, 2)
    );
    
    // Copy template files from claude-swift's issues/templates directory
    const frameworkTemplatesDir = path.join(process.cwd(), 'claude/issues/templates');
    const localTemplatesDir = path.join(issuesDir, 'templates');
    
    if (existsSync(frameworkTemplatesDir)) {
        const templateFiles = await fs.readdir(frameworkTemplatesDir);
        const mdTemplates = templateFiles.filter(file => file.endsWith('.md'));
        
        for (const templateFile of mdTemplates) {
            const sourcePath = path.join(frameworkTemplatesDir, templateFile);
            const targetPath = path.join(localTemplatesDir, templateFile);
            
            try {
                const templateContent = await fs.readFile(sourcePath, 'utf8');
                await fs.writeFile(targetPath, templateContent);
                console.log(`‚úì Copied template: ${templateFile}`);
            } catch (error) {
                console.log(`‚úó Failed to copy template ${templateFile}: ${error.message}`);
            }
        }
    } else {
        console.log('‚ö†Ô∏è  No issue templates found in claude-swift to copy');
    }
    
    // Update local config to mark structure as initialized but not seeded
    const localConfigDir = path.join(projectPath, 'claude/local');
    const configPath = path.join(localConfigDir, 'repo-config.json');
    
    let config = {};
    if (existsSync(configPath)) {
        try {
            config = JSON.parse(await fs.readFile(configPath, 'utf8'));
        } catch (error) {
            // Invalid JSON, will recreate
        }
    }
    
    config.issues_seeded = false;  // Structure exists but no issues loaded from GitHub yet
    config.issues_structure_initialized = true;
    config.issues_initialized_at = new Date().toISOString();
    
    await fs.writeFile(configPath, JSON.stringify(config, null, 2));
    
    console.log('‚úì Issues structure initialized with templates');
    console.log('‚úì Local config updated - structure ready, seeding pending');
}

/**
 * Add/register a project
 */
async function addProject(repository) {
    console.log(`üìù Registering project: ${repository}`);
    console.log('‚ïê'.repeat(50));
    
    // Validate repository format
    if (!repository || !repository.includes('/')) {
        throw new Error('Repository must be in format "org/repo"');
    }
    
    const [org, repo] = repository.split('/');
    
    // Prevent registration of sesameh org repositories
    if (org === 'sesameh') {
        throw new Error(`Cannot register sesameh organization repositories.
sesameh org contains provider/framework projects, not sub-projects.
Repository '${repository}' should not be registered.

Valid patterns:
  ‚úì org/repo (where org != sesameh)
  ‚úó sesameh/repo (provider repositories)`);
    }
    
    // Check if workspace is initialized
    if (!existsSync('projects')) {
        throw new Error('Workspace not initialized. Run "register sesame init" first.');
    }
    
    // Determine project path
    const projectPath = path.resolve('projects', repository);
    
    // Check if project exists locally, clone if needed
    if (!existsSync(projectPath)) {
        console.log(`Project '${repository}' not found locally. Checking GitHub...`);
        
        try {
            execSync('gh auth status', { stdio: 'pipe' });
        } catch (error) {
            throw new Error('GitHub CLI not authenticated. Run "gh auth login"');
        }
        
        try {
            execSync(`gh repo view "${repository}"`, { stdio: 'pipe' });
            console.log(`Found repository '${repository}' on GitHub. Cloning...`);
            
            const orgDir = path.dirname(projectPath);
            if (!existsSync(orgDir)) {
                await fs.mkdir(orgDir, { recursive: true });
            }
            
            execSync(`gh repo clone "${repository}" "${projectPath}"`, { stdio: 'inherit' });
            console.log(`‚úì Cloned ${repository} to ${projectPath}`);
        } catch (error) {
            throw new Error(`Repository '${repository}' not found locally or on GitHub`);
        }
    } else {
        console.log(`Found local repository: ${projectPath}`);
    }
    
    // Create symlinks using absolute paths
    const baseProjectPath = process.cwd(); // Current directory is claude-swift
    
    // Create CLAUDE.md symlink
    const claudeMdPath = path.join(projectPath, 'CLAUDE.md');
    if (existsSync(claudeMdPath)) {
        await fs.unlink(claudeMdPath);
    }
    await fs.symlink(path.join(baseProjectPath, 'CLAUDE.md'), claudeMdPath);
    console.log('‚úì Created CLAUDE.md symlink');
    
    // Create claude/wow symlink
    const claudeDir = path.join(projectPath, 'claude');
    const claudeWowPath = path.join(claudeDir, 'wow');
    
    if (!existsSync(claudeDir)) {
        await fs.mkdir(claudeDir);
    }
    if (existsSync(claudeWowPath)) {
        await fs.rm(claudeWowPath, { recursive: true, force: true });
    }
    await fs.symlink(path.join(baseProjectPath, 'claude/wow'), claudeWowPath);
    console.log('‚úì Created claude/wow symlink');
    
    // Create basic directory structure
    const requiredDirs = [
        'claude/project',
        'claude/inbox', 
        'claude/outbox',
        'claude/local'
    ];
    
    for (const dir of requiredDirs) {
        const fullPath = path.join(projectPath, dir);
        if (!existsSync(fullPath)) {
            await fs.mkdir(fullPath, { recursive: true });
        }
    }
    
    // Create README files for directories
    const readmeFiles = {
        'claude/inbox/README.md': `# Inbox

This directory receives cross-repository tasks from other projects.

## Workflow Integration
- Tasks delivered here via OUTBOX workflow from other repositories
- Tasks processed via \`inbox sesame\` (INBOX workflow)
- Tasks converted to GitHub issues for project management

## Status
- Files in this directory are **pending processing**
- Files are archived after conversion to issues
- Empty directory indicates all tasks have been processed`,

        'claude/outbox/README.md': `# Outbox

This directory contains cross-repository tasks awaiting distribution.

## File Format
- **Filename**: \`YYYY-MM-DDTHH-MM-SS-sssZ_target-repo_task-name.md\`
- **Content**: Standardized task format with metadata header

## Workflow Integration
- Tasks created here via \`task sesame\` (TASK_CREATE workflow)
- Tasks distributed via \`outbox sesame\` (OUTBOX workflow)
- Tasks processed at target via \`inbox sesame\` (INBOX workflow)

## Status
- Files in this directory are **pending distribution**
- Files are moved during OUTBOX workflow execution
- Empty directory indicates all tasks have been distributed`,

        'claude/local/README.md': `# Local Configuration Directory

This directory contains machine-specific configuration files that should not be committed to git.

## Files in this directory:
- \`repo-config.json\` - Local repository configuration with project settings
- \`session-config.json\` - Session-specific settings
- \`cache/\` - Local cache files

## Purpose:
Separates environment-specific configs from shared project configurations.`
    };
    
    for (const [filepath, content] of Object.entries(readmeFiles)) {
        const fullPath = path.join(projectPath, filepath);
        if (!existsSync(fullPath)) {
            await fs.writeFile(fullPath, content);
        }
    }
    
    console.log('‚úì Created basic project structure');
    
    // Initialize issues structure
    await initializeIssuesStructure(projectPath);
    
    // Update .gitignore for symlinks and local configs
    const gitignorePath = path.join(projectPath, '.gitignore');
    let gitignoreContent = '';
    if (existsSync(gitignorePath)) {
        gitignoreContent = await fs.readFile(gitignorePath, 'utf8');
    }
    
    const gitignoreEntries = [
        '# Framework symlinks (local setup only)',
        'CLAUDE.md',
        'claude/wow',
        '',
        '# Local machine-specific configurations', 
        'claude/local/'
    ];
    
    let needsUpdate = false;
    for (const entry of gitignoreEntries) {
        if (entry && !gitignoreContent.includes(entry)) {
            needsUpdate = true;
            break;
        }
    }
    
    if (needsUpdate) {
        gitignoreContent += '\n' + gitignoreEntries.join('\n') + '\n';
        await fs.writeFile(gitignorePath, gitignoreContent);
        console.log('‚úì Updated .gitignore with framework symlinks and local configs');
    }
    
    // Update registry
    const registry = await loadRegistry();
    const existingProject = registry.registered_projects.find(p => p.repository === repository);
    
    if (!existingProject) {
        registry.registered_projects.push({
            repository,
            path: projectPath,
            registered_at: new Date().toISOString()
        });
        await saveRegistry(registry);
        console.log(`‚úì Added ${repository} to project registry`);
    } else {
        console.log(`‚úì Project ${repository} already in registry`);
    }
    
    console.log(`\n‚úÖ Project ${repository} registered successfully!`);
}

/**
 * Remove/unregister a project
 */
async function removeProject(repository) {
    console.log(`üóëÔ∏è  Unregistering project: ${repository}`);
    console.log('‚ïê'.repeat(50));
    
    if (!repository || !repository.includes('/')) {
        throw new Error('Repository must be in format "org/repo"');
    }
    
    const registry = await loadRegistry();
    const projectIndex = registry.registered_projects.findIndex(p => p.repository === repository);
    
    if (projectIndex === -1) {
        throw new Error(`Project '${repository}' is not registered`);
    }
    
    const project = registry.registered_projects[projectIndex];
    const projectPath = project.path;
    
    // Clean up symlinks if project still exists
    if (existsSync(projectPath)) {
        console.log('Cleaning up project symlinks...');
        
        // Remove symlinks using absolute paths
        const claudeMdPath = path.join(projectPath, 'CLAUDE.md');
        const claudeWowPath = path.join(projectPath, 'claude/wow');
        
        if (existsSync(claudeMdPath) && (await fs.lstat(claudeMdPath)).isSymbolicLink()) {
            await fs.unlink(claudeMdPath);
            console.log('‚úì Removed CLAUDE.md symlink');
        }
        
        if (existsSync(claudeWowPath) && (await fs.lstat(claudeWowPath)).isSymbolicLink()) {
            await fs.unlink(claudeWowPath);
            console.log('‚úì Removed claude/wow symlink');
        }
    }
    
    // Remove from registry
    registry.registered_projects.splice(projectIndex, 1);
    await saveRegistry(registry);
    
    console.log(`‚úì Removed ${repository} from project registry`);
    console.log(`\n‚úÖ Project ${repository} unregistered successfully!`);
    console.log(`\nüìÅ Project files remain at: ${projectPath}`);
    console.log('   (You can manually delete the directory if no longer needed)');
}

/**
 * List registered projects
 */
async function listProjects() {
    console.log('üìã Registered Projects');
    console.log('‚ïê'.repeat(50));
    
    const registry = await loadRegistry();
    
    if (registry.registered_projects.length === 0) {
        console.log('No projects registered.');
        console.log('\nUse "register sesame add [org/repo]" to register projects.');
        return;
    }
    
    console.log(`Found ${registry.registered_projects.length} registered project(s):\n`);
    
    for (const project of registry.registered_projects) {
        const exists = existsSync(project.path);
        const status = exists ? '‚úì' : '‚úó';
        const date = new Date(project.registered_at).toLocaleDateString();
        
        console.log(`${status} ${project.repository}`);
        console.log(`   Path: ${project.path}`);
        console.log(`   Registered: ${date}`);
        console.log(`   Status: ${exists ? 'Available' : 'Missing'}`);
        console.log('');
    }
}

/**
 * Show workspace and registration status
 */
async function showStatus() {
    console.log('üìä Workspace Status');
    console.log('‚ïê'.repeat(50));
    
    // Check workspace initialization
    const workspaceInitialized = existsSync('projects');
    console.log(`Workspace Initialized: ${workspaceInitialized ? '‚úì Yes' : '‚úó No'}`);
    
    if (workspaceInitialized) {
        try {
            const projectsLink = await fs.readlink('projects');
            console.log(`Projects Directory: ${projectsLink}`);
            console.log(`Projects Accessible: ${existsSync('projects') ? '‚úì Yes' : '‚úó No'}`);
        } catch (error) {
            console.log('Projects Directory: ‚úó Invalid symlink');
        }
    }
    
    // Check registry
    const registry = await loadRegistry();
    console.log(`Registered Projects: ${registry.registered_projects.length}`);
    
    if (registry.registered_projects.length > 0) {
        let available = 0;
        let missing = 0;
        
        for (const project of registry.registered_projects) {
            if (existsSync(project.path)) {
                available++;
            } else {
                missing++;
            }
        }
        
        console.log(`  Available: ${available}`);
        console.log(`  Missing: ${missing}`);
    }
    
    console.log('');
    
    if (!workspaceInitialized) {
        console.log('üí° Next steps:');
        console.log('   Run "register sesame init" to initialize workspace');
    } else if (registry.registered_projects.length === 0) {
        console.log('üí° Next steps:');
        console.log('   Run "register sesame add [org/repo]" to register projects');
    } else {
        console.log('‚úÖ Workspace ready for multi-project operations!');
    }
}

/**
 * Main function
 */
async function main() {
    try {
        const command = process.argv[2];
        const arg = process.argv[3];
        
        if (!command) {
            console.log('Registration Management Script');
            console.log('Commands:');
            console.log('  init                  - Initialize workspace');
            console.log('  add [org/repo]        - Register specific project');
            console.log('  remove [org/repo]     - Unregister project');
            console.log('  list                  - Show all registered projects');
            console.log('  status                - Show workspace and registration status');
            return;
        }
        
        switch (command) {
            case 'init':
            case 'initialise':
                await initializeWorkspace();
                break;
                
            case 'add':
                if (!arg) {
                    console.error('Usage: register-manage add [org/repo]');
                    process.exit(1);
                }
                await addProject(arg);
                break;
                
            case 'remove':
                if (!arg) {
                    console.error('Usage: register-manage remove [org/repo]');
                    process.exit(1);
                }
                await removeProject(arg);
                break;
                
            case 'list':
                await listProjects();
                break;
                
            case 'status':
                await showStatus();
                break;
                
            default:
                // Assume it's a repository name for backwards compatibility
                if (command.includes('/')) {
                    await addProject(command);
                } else {
                    console.error(`Unknown command: ${command}`);
                    console.log('Run register-manage without arguments to see available commands');
                    process.exit(1);
                }
        }
        
    } catch (error) {
        console.error(`‚ùå Registration management failed: ${error.message}`);
        process.exit(1);
    }
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
    main();
}

export { initializeWorkspace, addProject, removeProject, listProjects, showStatus };